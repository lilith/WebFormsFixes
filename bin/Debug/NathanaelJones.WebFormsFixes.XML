<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NathanaelJones.WebFormsFixes</name>
    </assembly>
    <members>
        <member name="T:NathanaelJones.WebFormsFixes.yrl">
            <summary>
            Enapsulates a mutable (changable) site-relative URL. Note that "" is equivalent to the application root directory in YRL notation (the ~/ is implicit, always).
            QueryFindYrlVerifyID can be removed if external dependencies aren't allowed. It uses NathanaelJones.Articles.Index.FindPathByID()
            This class is designed to standardize path interpretation and conversion.
            </summary>
        </member>
        <member name="F:NathanaelJones.WebFormsFixes.yrl.BaseFile">
            <summary>
            The base file, usually a .aspx page. Ex. 'home.aspx' or 'admin/new.aspx'. Can also be a base directory, such as articles
            </summary>
        </member>
        <member name="F:NathanaelJones.WebFormsFixes.yrl.QueryString">
            <summary>
            A collection of name/value query paramaters. Do NOT UrlEncode/Decode these! That step will be done for you.
            </summary>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.#ctor">
            <summary>
            Creates a default instance of yrl which  points to the application root directory.
            </summary>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.FromString(System.String)">
            <summary>
            Returns a yrl object from a path. Returns null if the path cannot be parsed.
            (Out of application bounds, or an invalid character). The tilde is an invalid character unless used as the app-relative specifier.
            </summary>
            <param name="path">A path
            Each query paramater will be UrlDecoded.
            </param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.FromYrlString(System.String)">
            <summary>
            Creates an instance from a yrl-syntax string (virtual, but without ~/). Use FromString if you're not sure what type of syntax is used.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.FromRelativePhysicalString(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.FromPhysicalString(System.String)">
            <summary>
            Creates a yrl Instance from the specified physical path. Throws an exception if the path is outside the application structure.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.GetAppFolderName">
            <summary>
            either '/' or '/folder' like '/yf' or sometimes '/folder/folder'
            </summary>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.TrimStartAppFolder(System.String)">
            <summary>
            Removes the application folder from the specified path. Leaves the leading forwardslash. 
            Assuming the Application path is /yf, this function will transform /yf/home.aspx to /home.aspx and /yf/css/john.css to /css/john.css
            If the application is located in '/', nothing will be done to the path. Transforms yf/home.aspx to /home.aspx, yf\home.aspx to \home.aspx, \yf\home.aspx to \home.aspx
            Won't work if the app folder has a child directory named the same!
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.GetPathType(System.String)">
            <summary>
            Returns the type of path 
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.Copy">
            <summary>
            Creates a deep copy of the yrl
            </summary>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.ToString">
            <summary>
            Returns a site-root-relative path along with query paramaters
            </summary>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.NavigateUrlEncode(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.Equals(System.Object)">
            <summary>
            Compares the hash codes of the two instances.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.GetHashCode">
            <summary>
            Returns a unique hash code derived from the URL property of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.ChangeExtension(System.String)">
            <summary>
            Deletes the old extension and replaces it with the specified extension. A leading '.' is not neccesary
            </summary>
            <param name="newextension"></param>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.GetNextAvailableDerivitive">
            <summary>
            Returns the next unused filename similar to the current one,by incrementing (i)
            </summary>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.Combine(NathanaelJones.WebFormsFixes.yrl,NathanaelJones.WebFormsFixes.yrl)">
            <summary>
            Joins two yrls. Querystrings on either are discarded.
            </summary>
            <param name="folder"></param>
            <param name="filenameOrSubdir"></param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.CreateAbsoluteUrl(System.String)">
            <summary>
            Returns an absolute path to the current yrl using the specified base path
            </summary>
            <param name="protocolHostnameFolder">A base path like http://youngfoundations.org/ or http://localhost:2755/yf/</param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.yrl.IsNullOrEmpty(NathanaelJones.WebFormsFixes.yrl)">
            <summary>
            Returns true if the yrl is null or empty (site root)
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.QueryID">
            <summary>
            yrl.QueryString["id"] Returns -1 if not found, -2 if unparseable
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.QueryPath">
            <summary>
            yrl.QueryString["path"]. Returns null if not found, throws exception if not parseable.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.QueryDir">
            <summary>
            yrl.QueryString["dir"]. Returns null if not found, throws exception if not parseable.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.QueryFindID">
            <summary>
            Tries to track down the ID by looking at QueryString["id"], then QueryString["path"]. Returns -1 if unsuccessful
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.Local">
            <summary>
            Returns the physical filesystem path for this yrl
            </summary>
            <returns></returns>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.Virtual">
            <summary>
            Returns the virtual path(~/...)of the base file without query paramaters.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.VirtualURL">
            <summary>
            Returns the virtual path (~/...) of the base file with query paramaters appended.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.NavigateURL">
            <summary>
            Returns a ~/ path designed for the Hyperlink.NavigateUrl property
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.URL">
            <summary>
            Returns root-relative URL with query paramaters in the form 'articles/00001002 article.aspx'
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.URLEncoded">
            <summary>
            Returns root-relative URL with query paramaters in the form 'articles/00001002%20article.aspx'
            </summary>
            <returns></returns>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.URLHtmlEncoded">
            <summary>
            Returns root-relative URL with query paramaters in the form 'articles/00001002%20article.aspx'.
            Encodes special characters into HTML entities using Server.URLPathEncode
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.URLAnchorTarget">
            <summary>
            Returns a domain-relative path in the form '/yf/articles/00001002%20article.aspx'
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.RelativeURL">
            <summary>
            Returns relaitve URL with query paramaters in the form '../articles/00001002 article.aspx'
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.ID">
            <summary>
            Returns the ID if a leading 8-digit ID is found in the base file. Returns -1 otherwise
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.FirstID">
            <summary>
            Returns first leading ID found in a segment of the path.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.FileExists">
            <summary>
            Returns true if BaseFile exists as a local file.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.DirExists">
            <summary>
            Returns true if BaseFile exists as a local Directory.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.DirInfo">
            <summary>
            Returns a DirectoryInfo object for BaseFile if it is a directory. If not, it returns the parent directory
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.Parent">
            <summary>
            Returns a yrl of the parent directory. If the current yrl is already the root, returns null;
            Use 
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.Directory">
            <summary>
            Returns the directory portion of this yrl.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.Root">
            <summary>
            Returns an instance of yrl that points to the application root.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.Current">
            <summary>
            Returns the REAL file that is being executed. Falls back to CurrentBrowserUrl if unavailable.
            Unavailable if UrlRewritingNet isn't in use
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.CurrentBrowserURL">
            <summary>
            Retreieves the current URL from HttpContext.Current.Request.Url (pre-rewrite path)
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.Referrer">
            <summary>
            Returns null if unavailable
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.IsEmpty">
            <summary>
            An empty yrl signifies the application root. This verifies both the path and the querystring are empty.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.IsRoot">
            <summary>
            Returns true if the basefile is empty (the root) (the QueryString can have data). Use IsEmpty to check that both are empty.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.IsInRoot">
            <summary>
            Returns true if this path has no parent directory (the parent directory is the root).
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.Name">
            <summary>
             Returns the name of the directory (like 'archives') if it is one, and the name of the file (like 'universal.css') if it is a file.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.NameWithoutExtension">
            <summary>
            Returns the name of BaseFile without the extension.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.PrettyTitle">
            <summary>
            Returns the filename without the ID or extension, converts underscores to spaces, and trims the string.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.FilenameWithoutIdAndExtension">
            <summary>
            Returns the filename minus path information, extensions, or Article ID.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.Extension">
            <summary>
            Returns the extension of BaseFile in the form '.aspx'
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.IsAspx">
            <summary>
            returns true if BaseFile ends with .aspx
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.IsCodeFile">
            <summary>
            returns true if BaseFile ends with .cs or .vb
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.FindAssociatedMarkupFile">
            <summary>
            If this is .aspx.cs or .aspx.vb file, attempts to find and return the associated .aspx file. 
            If this is a .aspx file, returns the current instance.
            Otherwise, this returns null;
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.yrl.FindAssociatedCodeFile">
            <summary>
            If this is an .aspx file, attempts to find and return an associated .aspx.cs or .aspx.vb file. 
            If this is .aspx.cs or .aspx.vb file, returns the current instance.
            Otherwise, this returns null;
            </summary>
        </member>
        <member name="T:NathanaelJones.WebFormsFixes.yrl.PathType">
            <summary>
            Path syntaxes, determined by patterns.
            </summary>
        </member>
        <member name="F:NathanaelJones.WebFormsFixes.yrl.PathType.BackslashPath">
            <summary>
            A path like '\temp\file.htm'
            </summary>
        </member>
        <member name="F:NathanaelJones.WebFormsFixes.yrl.PathType.DriveletterColonBackslashPath">
            <summary>
            A path like 'c:\program files\temp'
            </summary>
        </member>
        <member name="F:NathanaelJones.WebFormsFixes.yrl.PathType.PathBackslashPath">
            <summary>
            a path like 'img\file.img'
            </summary>
        </member>
        <member name="F:NathanaelJones.WebFormsFixes.yrl.PathType.TildeForwardslashPath">
            <summary>
            a path like '~/home.aspx'
            </summary>
        </member>
        <member name="F:NathanaelJones.WebFormsFixes.yrl.PathType.ForwardslashPath">
            <summary>
            a path like '/home.aspx'
            </summary>
        </member>
        <member name="F:NathanaelJones.WebFormsFixes.yrl.PathType.PathForwardslashPath">
            <summary>
            a path like 'img/banner.jpg'
            </summary>
        </member>
        <member name="F:NathanaelJones.WebFormsFixes.yrl.PathType.ServerForwardslashPath">
            <summary>
            a path like http://www.branham.org/home.aspx
            </summary>
        </member>
        <member name="F:NathanaelJones.WebFormsFixes.yrl.PathType.File">
            <summary>
            A filename with no path, like 'test.exe' or 'home.aspx'
            </summary>
        </member>
        <member name="F:NathanaelJones.WebFormsFixes.yrl.PathType.Root">
            <summary>
            Specifies the application root
            </summary>
        </member>
        <member name="F:NathanaelJones.WebFormsFixes.yrl.PathType.Invalid">
            <summary>
            Indeterminant form
            </summary>
        </member>
        <member name="T:NathanaelJones.WebFormsFixes.HideIDAdapter">
            <summary>
            Allows controls to prevent rendering of the "id" attribute. 
            Adds support for the HideID attribute to classes that inherit from HtmlControl and WebControl.
            If HideID="true", the ID property will be set to null at render time, causing no id to be rendered.
            </summary>
        </member>
        <member name="T:NathanaelJones.WebFormsFixes.HideIDAlwaysAdapter">
            <summary>
            Sets the ID property of the control to null at render time, preventing it from being rendered.
            Affects classes that inherit from HtmlControl and WebControl. Applied via App_Browsers to certain controls.
            </summary>
        </member>
        <member name="T:NathanaelJones.WebFormsFixes.ContentPlaceHolderFixes">
            <summary>
            Provides utility methods to clean up after 2 separate bugs related to ContentPlaceHolders.
            Bug 1) ContentPlaceHolders inside the head section prevent stylesheets and meta tags from being parsed correctly. Use RepairPageHeader(page) to reparse and fix the hierarchy.
            Bug 2) ContentPlaceHolders report their TemplateControl as their originating MasterPage, instead of the Content page their contents come from. Use GetAdjustedParentTemplateControl(control) to calculate the right value.
            
            </summary>
        </member>
        <member name="F:NathanaelJones.WebFormsFixes.ContentPlaceHolderFixes.CommentsAndSingleTags">
            <summary>
            Matches HTML, ASP comments and Tags with no contents. We didn't want to match tags inside comments.
            We spit the comments back out, but parse the tags, looking for link, meta, and script.
            We are doing post-proccessing only on literal tags, so everything else that needs to be parsed already should be.
            
            </summary>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.ContentPlaceHolderFixes.RepairPageHeader(System.Web.UI.Page)">
            <summary>
            Reparses meta and link tags that weren't parsed correctly the first time.
            Only works inside ContentPlaceHolder controls located inside the head.
            1) Parses literal controls: looks for self-closing and empty meta, link, and script controls. 
            Supports Visible and EnableViewState attributes correctly. EnableViewState=false if not specified.
            The TemplateControl is re-calculated.
            2) Parses HtmlGenericControls (link, meta, script tags with runat="server"). HtmlGenericControl instances for 'script' can
            only exist if added through code, since &lt;script runat="server"&gt; is for server side code. Supports it anyway :)
            Supports Visible and EnableViewState attributes correctly. EnableViewState=false if not specified.
            The TemplateControl is re-calculated.
            Note: script references don't have a built-in control, so we use a custom ScriptReference instance to provide the rebasing support.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.ContentPlaceHolderFixes.ParseLiteralControl(System.Web.UI.Control,System.String)">
            <summary>
            Parses the specified literal control and returns a replacement control (often PlaceHolder) containing 
            the newly parsed controls. Only self-closing tags or tags that only contain whitespace. Creates
            HtmlMeta (for &lt;meta&gt;), HtmlLink (for &lt;link&gt;), HtmlGenericControl (for &lt;script&gt;) and uses LiteralControl instances for the rest
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.ContentPlaceHolderFixes.GetAdjustedParentTemplateControl(System.Web.UI.Control)">
            <summary>
            Returns the adjusted TemplateControl property for 'c'. Accounts for the ContentPlaceHolder 
            Template Control bug.
            
            This bug causes the TemplateControl property of each ContentPlaceHolder to equal the master
            page that the ContentPlaceHolder originated from. Unfortunately, the contents of each 
            matchingContent control are dumped right into the ContentPlaceHolder. This makes it 
            impossible to rely on Parent.TemplateControl, because if the control is right inside 
            a Content tag, then it will evaluate to the Master page, instead of the Content page.
            
            This function should be useful for .ascx controls wishing to find their true TemplateControl
            parent. 
            </summary>
            <param name="c">The control you want to calculate the adjusted parent TemplateControl
            property for. If c *is* a TemplateControl, then the function will return the 
            parent TemplateControl</param>
            <returns></returns>
        </member>
        <member name="T:NathanaelJones.WebFormsFixes.LinkManager">
            <summary>
            Manages &lt;link> tags (controls) on the current page.
            </summary>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.LinkManager.#ctor(System.Web.UI.Page)">
            <summary>
            Creates a new Link Manager attached to the specified Page instance
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.LinkManager.AddLink(System.String)">
            <summary>
            Adds a CSS reference. Paths must be 1) relative to the page, 2) application-relative, or 3) absolute
            </summary>
            <param name="href"></param>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.LinkManager.AddLinkIfMissing(System.String)">
            <summary>
            Adds a CSS stylsheet reference, but only if there isn't one yet for that path.
            Paths must be 1) relative to the page, 2) application-relative, or 3) absolute
            </summary>
            <param name="href"></param>
            <param name="resolveFirst">If true, compares resolved paths instead of raw paths</param>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.LinkManager.AddLink(System.String,System.String,System.String)">
            <summary>
            Adds a link tag with the specified rel and type attributes
            Paths must be 1) relative to the page, 2) application-relative, or 3) absolute
            </summary>
            <param name="href"></param>
            <param name="rel"></param>
            <param name="type"></param>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.LinkManager.RemoveLinks(System.String)">
            <summary>
            Removes all meta tags with a matching href.
            Paths must be 1) relative to the page, 2) application-relative, or 3) absolute
            </summary>
            <param name="href"></param>
            <param name="resolveFirst">If true, compares resolved paths instead of raw paths</param>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.LinkManager.GetControls">
            <summary>
            Returns a collection of all HtmlLink controls in the page header.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.LinkManager.GetHrefs">
            <summary>
            Returns a collection of the hrefs in each link tag in the head section.
            Paths are 1) relative to the page, 2) application-relative, or 3) absolute
            </summary>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.LinkManager.FindLinkControl(System.String)">
            <summary>
            Case-insensitive. Returns the first HtmlLink control in the heirarchy that matches the href. Only scans inside the head tag.
            returns null if no match is found.
            
            </summary>
            <param name="href">Paths must be 1) relative to the page, 2) application-relative, or 3) absolute</param>
            <param name="resolveFirst">If true, compares resolved paths instead of raw paths</param>
            <returns></returns>
        </member>
        <member name="T:NathanaelJones.WebFormsFixes.MetadataManager">
            <summary>
            Manages &lt;meta> tags (controls) on the current page. Not designed for HTTP-EQUIV tags - they are ignored and skipped unless they have a name attribute.
            Only deals with meta tags within the Head of the page. The page must have a server-side head tag.
            </summary>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.MetadataManager.#ctor(System.Web.UI.Page)">
            <summary>
            Creates a new MetadataManager and attaches it to the current page.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.MetadataManager.GetControls">
            <summary>
            Returns a collection of all HtmlMeta controls in the header
            </summary>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.MetadataManager.GetNameContentPairs">
            <summary>
            Returns a name:value collection of meta name:content pairs from the page.
            If there are multiple meta tags with the same name, the contents are comma-delimited (NameValueCollection.Add behavior)
            </summary>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.MetadataManager.GetControl(System.String)">
            <summary>
            Returns the first HtmlMeta control with the specified name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.MetadataManager.GetNonMatches(System.String)">
            <summary>
            Returns all meta tags that don't match 'pattern' 
            To exclude all, specify "*". Otherwise, specify a list of exclusions: "date,expires,description,flags".
            Not regex, but case-insensitive.
            </summary>
            <param name="pattern">To exclude all, specify "*". Otherwise, specify a list of exclusions: "date,expires,description,flags".</param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.MetadataManager.GetMatches(System.String)">
            <summary>
            Returns all meta tags with a name that matches 'pattern' 
            To match all, specify "*". Otherwise, specify a list of possibilities: "date,expires,description,flags".
            Not regex, but case-insensitive.
            </summary>
            <param name="pattern">To match all, specify "*". Otherwise, specify a list of possibilities: "date,expires,description,flags".</param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.MetadataManager.RemoveControls(System.Collections.Generic.List{System.Web.UI.HtmlControls.HtmlMeta})">
            <summary>
            Removes the specified HtmlMeta controls from their parents.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.MetadataManager.HideControls(System.Collections.Generic.List{System.Web.UI.HtmlControls.HtmlMeta})">
            <summary>
            Hides the specified HtmlMeta controls from rendering
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.MetadataManager.GetMatches(System.String,NathanaelJones.WebFormsFixes.MetadataManager.FilterType)">
            <summary>
            Returns a collection of HtmlMeta tags that match 'pattern' (or don't match, depending on 'filter').
            Pattern is not a regex, but supports alternations and is case-insensitive. if Pattern="*", then everything matches.
            Pattern can be a single meta name, or a list of meta names (comma or | delimited).
            </summary>
            <param name="pattern">To match all, specify "*". Otherwise, specify a list of possibilities: "date,expires,description,flags".</param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.MetadataManager.FindMetaControl(System.String,System.Web.UI.Control)">
            <summary>
            Recursively searches the hierarchy of 'parent' for the first HtmlMeta instance with the specified Name attribute.
            Case-insensitive. 
            </summary>
            <param name="name">Case-insensitive. </param>
            <param name="parent">Control tree to search</param>
            <returns></returns>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.MetadataManager.Item(System.String)">
            <summary>
            Gets or sets the Content attribute for the specified metadata tag.
            Returns null if pair does not exist.
            Creates a new metadata tag if it does not exist.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:NathanaelJones.WebFormsFixes.MetadataManager.FilterType">
            <summary>
            Whether to include or exclude matches
            </summary>
        </member>
        <member name="T:NathanaelJones.WebFormsFixes.PageBase">
            <summary>
            Extends System.Web.UI.Page
            Also allows an alternate 'Runtime' master page to be set.
            Records the URL than was the original referrer (before all of the postbacks)
            Repairs parsing issues where ContentPlaceHolder doesn't parse link and meta information, even if it is located in
            a HEAD tag.
            
            If you want to use RuntimeMasterPage, OriginalReferrer, modify metdata at runtime, or use stylesheets, you need to inherit
            from this class. If this is an article, inherit from ArticleBase.
            </summary>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.PageBase.#ctor">
            <summary>
            Creates a new PageBase instance. 
            </summary>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.PageBase.LoadControlState(System.Object)">
            <summary>
            Loads the stored referrer value (if any) from Control State
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.PageBase.SaveControlState">
            <summary>
            Saves the referrer value (if any) to Control State
            </summary>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.PageBase.OnPreInit(System.EventArgs)">
            <summary>
            Sets the runtime master page
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.PageBase.OnLoad(System.EventArgs)">
            <summary>
            Calls the ContentPlaceHolderHeadRepair.Repair method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.PageBase.GetSectionControl(System.String)">
            <summary>
            Returns the first ContentPlaceHolder with the specified ID. Returns null if no matches are found.
            </summary>
            <param name="sectionID">Case-insensitive</param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.PageBase.GetTree">
            <summary>
            Returns the printed control tree of the page as a string.  For debug purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.PageBase.OriginalReferrer">
            <summary>
            This the the referrer recorded in viewstate before any post-backs occurred.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.PageBase.OriginalReferrerYrl">
            <summary>
            The original referrer in normalized, yrl form.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.PageBase.RuntimeMasterPage">
            <summary>
            The master page file to use during runtime. This value is passed through the yrl class for normalization purposes.
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.PageBase.Metadata">
            <summary>
            Manages page metadata. Add, remove, and query metadata 
            (Only meta tags with a name attribute are affected, and only those located in the head section)
            </summary>
        </member>
        <member name="P:NathanaelJones.WebFormsFixes.PageBase.Stylesheets">
            <summary>
            Manages all of the HtmlLink controls in the head section of the page.
            Register, delete, and enumerate all link tags.
            </summary>
        </member>
        <member name="T:NathanaelJones.WebFormsFixes.ScriptReference">
            <summary>
            A HtmlControl which resolves the 'src' attribute at render time.
            </summary>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.ControlUtils.GetLiteralContents(System.Web.UI.Control)">
            <summary>
            Doesn't use rendering. Recursively loops through content and concatenates all Literal or LiteralControl contents within
            the specified control. Used by GetDescriptionFromSummary()
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.ControlUtils.PrintTree(System.Web.UI.Control,System.Int32,System.IO.TextWriter)">
            <summary>
            Prints an text-based tree of the control structure of the specified Web Control. For debug purposes.
            </summary>
            <param name="c"></param>
            <param name="indentLevel"></param>
            <param name="outputStream"></param>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.ControlUtils.GetControlsOfType``1(System.Web.UI.Control)">
            <summary>
            Iterates over the control structure of the specified object and returns all elements that are
            of the specified type
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:NathanaelJones.WebFormsFixes.ControlUtils.GetControlsOfType``1(System.Web.UI.Control,System.Boolean,System.Boolean)">
            <summary>
            Iterates over the control structure of the specified object and returns all elements that are
            of the specified type. If there are two items of the specified type, and one is a child of the other, 
            the childrenOnly and parentOnly parameters can be used to control which is selected. If both are false, both controls are returned.
            </summary>
            <param name="parent">The control to search</param>
            <param name="childrenOnly">If true, only the innermost matching children will be returned.</param>
            <param name="parentsOnly">If true, only the outermost matching parents will be returned.</param>
            <returns></returns>
        </member>
        <member name="T:NathanaelJones.WebFormsFixes.FixHtmlAnchorAmpersandAdapter">
            <summary>
            Patches the ampersand bug in HtmlAnchor controls.
            Affects HtmlAnchor controls (&lt;a href="" runat="server" /&gt;).
            Supports HideID, but not HideIDAlways.
            </summary>
        </member>
    </members>
</doc>
